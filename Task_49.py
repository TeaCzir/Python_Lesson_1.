# Задача №49.  1) Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из 
# пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи 
# используйте списочные выражения. Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, 
# а затем найти и сам эллипс, имеющий такую  площадь. Гарантируется, что самая далекая планета ровно одна
# 2) - Дан список размеров(длина, ширина) эллипсов  orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# Напишите функцию find_farthest_orbit(list_of_orbits), которая находит площадь самого большого эллипса и возвращает кортеж с его размерами.
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b – длины и ширина осей эллипса   Площадь кругов учитывать не нужно, 
# т.е если у эллипса a == b, то это круг. При решении задачи используйте списочные выражения. Гарантируется, что самый большой эллипс всего один.

def find_farthest_orbit(list_of_orbits):

    # 1
    # list_of_ellipse = [a, b for a, b in list_of_orbits if a != b]
    # list_of_areas = [a * b for a, b in list_of_ellipse]
    # 2
    list_of_ellipse = list(filter(lambda a_b: a_b[0] != a_b[1], list_of_orbits))
    list_of_areas = list(map(lambda a_b: a_b[0] * a_b[1], list_of_ellipse))
    max_area = max(list_of_areas)
    i_max_area = list_of_areas.index(max_area)
    return list_of_ellipse[i_max_area]
    
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(find_farthest_orbit(orbits))


